######################################################################
# Avvio stampa
######################################################################

[gcode_macro START_PRINT]
gcode:
    # Importa variabili temperature e area stampa da file
    {% set BED_TEMP = params.BED_TEMP|default(60) %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150) %}
    {% set AREA_START = params.AREA_START|default("0,0") %}
    {% set AREA_END = params.AREA_END|default("0,0") %}

    # Riscaldamento piatto + pre-riscaldamento ugello
    M104 S170;              Avvia pre-riscaldamento ugello
    M190 S{BED_TEMP} ;      Avvia e attende riscaldamento completo piatto

    # Calibrazione home + mesh area di stampa
    K2000 ;                        Avvia effetto LED superiori
    G92 E0 ;                       Reset estrusore
    G28 ;                          Home
    HOTBREATH ;                    Avvia effetto LED hotend
    BED_MESH_CALIBRATE AREA_START={AREA_START} AREA_END={AREA_END}
    M104 S{EXTRUDER_TEMP} ;        Avvia riscaldamento completo ugello
    HOTEND_MEDI ;                  Accende LED hotend
    G1 X210 Y210 Z50 F3000 ;       Sposta ugello nell'angolo
    STOP_EFFETTI ;                 Spegne effetto LED (superiori)
    M109 S{EXTRUDER_TEMP} ;        Attende riscaldamento completo ugello
    HOTEND_OFF ;                   Spegne LED hotend
    TOP_MEDI ;                     Imposta illuminazione superiore fissa

    # Procedura test-pulizia estrusore (da Cura)
    G1 X2.1 Y20 Z10 F3000 ;         Porta ugello in posizione
    G1 Z0.2 F5000 ;                 Abbassa ugello (asse Z)
    HOTEND_BASSI ;                  Imposta illuminazione estrusore fissa
    G1 X2.1 Y200 Z0.2 F1500 E15 ;   Spurga prima riga
    G1 X2.4 Y200 Z0.2 F5000 ;       Sposta ugello lateralmente
    G1 X2.4 Y20 Z0.2 F1500 E30 ;    Spurga seconda riga
    G92 E0 ;                        Reset estrusore
    G1 Z2 F3000 ;                   Solleva leggermente ugello (asse Z)
    G1 X5 Y20 Z0.2 F5000 ;          Pulisce ugello da possibili sporchi
    G1 Z5 F3000 ;                   Solleva leggermente ugello (asse Z)

######################################################################
# Fine stampa
######################################################################

[gcode_macro END_PRINT]
gcode:
    # Pulizia ugello al termine stampa (da Cura)
    G91 ;                   Usa posizione attuale per gli spostamenti
    G1 E-2 F2700 ;          Retrae filamento
    G1 E-2 Z0.2 F2400 ;     Retrae filamento e sposta asse Z in alto
    G1 X5 Y5 F3000 ;        Pulisce ugello
    G1 Z10 ;                Solleva ugello (asse Z)
    G90 ;                   Usa posizione assoluta per gli spostamenti

    # Sposta ugello e spegne ventola, riscaldamento e motori (da Cura)
    G1 X210 Y210 F3000 ;  Sposta ugello all'angolo
    M106 S0 ;       Spegne ventola materiale
    M104 S0 ;       Spegne riscaldamento ugello
    M140 S0 ;       Spegne riscaldamento piatto

    M84 X Y E ;     Disabilita tutti i motori (tranne Z)

    TOP_OFF ;   Spegne i LED superiori
    HOTEND_OFF ;   Spegne i LED hotend

######################################################################
# Calibrazione mesh piano solo su area stampa (https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02)
######################################################################

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}